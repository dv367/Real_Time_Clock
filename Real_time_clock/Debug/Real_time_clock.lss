
Real_time_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000220  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c0a  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000923  00000000  00000000  00000f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000585  00000000  00000000  00001861  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044a  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011a  00000000  00000000  0000233e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	61 d0       	rcall	.+194    	; 0x16c <main>
  aa:	7e c0       	rjmp	.+252    	; 0x1a8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <initiate_i2c>:
uint8_t read_nack()								//start transmission without ack
{
	TWCR=(1<<TWINT | 1<<TWEN);
	while( !(TWCR & (1<<TWINT)) );
	return TWDR;
}
  ae:	88 e4       	ldi	r24, 0x48	; 72
  b0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  b4:	08 95       	ret

000000b6 <start_i2c>:
  b6:	e4 e7       	ldi	r30, 0x74	; 116
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	24 ea       	ldi	r18, 0xA4	; 164
  bc:	a1 e7       	ldi	r26, 0x71	; 113
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	10 82       	st	Z, r1
  c2:	20 83       	st	Z, r18
  c4:	90 81       	ld	r25, Z
  c6:	99 23       	and	r25, r25
  c8:	ec f7       	brge	.-6      	; 0xc4 <start_i2c+0xe>
  ca:	9c 91       	ld	r25, X
  cc:	98 7f       	andi	r25, 0xF8	; 248
  ce:	98 30       	cpi	r25, 0x08	; 8
  d0:	b9 f7       	brne	.-18     	; 0xc0 <start_i2c+0xa>
  d2:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  d6:	84 e8       	ldi	r24, 0x84	; 132
  d8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  dc:	e4 e7       	ldi	r30, 0x74	; 116
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	88 23       	and	r24, r24
  e4:	ec f7       	brge	.-6      	; 0xe0 <start_i2c+0x2a>
  e6:	08 95       	ret

000000e8 <write_i2c>:
  e8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  ec:	84 e8       	ldi	r24, 0x84	; 132
  ee:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  f2:	e4 e7       	ldi	r30, 0x74	; 116
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	ec f7       	brge	.-6      	; 0xf6 <write_i2c+0xe>
  fc:	08 95       	ret

000000fe <read_ack>:
  fe:	84 ec       	ldi	r24, 0xC4	; 196
 100:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 104:	e4 e7       	ldi	r30, 0x74	; 116
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	88 23       	and	r24, r24
 10c:	ec f7       	brge	.-6      	; 0x108 <read_ack+0xa>
 10e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 112:	08 95       	ret

00000114 <stop_i2c>:

void stop_i2c()
{
	TWCR=(1<<TWINT | 1<<TWEN | 1<<TWSTO);		
 114:	84 e9       	ldi	r24, 0x94	; 148
 116:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 11a:	08 95       	ret

0000011c <rtc_set_time>:
	
	stop_i2c();
}*/

void rtc_set_time(uint8_t hh,uint8_t mm,uint8_t ss)
{
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	c8 2f       	mov	r28, r24
 124:	d6 2f       	mov	r29, r22
 126:	14 2f       	mov	r17, r20
	
	initiate_i2c();
 128:	c2 df       	rcall	.-124    	; 0xae <initiate_i2c>
	start_i2c(rtc_writemode);
 12a:	80 ed       	ldi	r24, 0xD0	; 208
 12c:	c4 df       	rcall	.-120    	; 0xb6 <start_i2c>
	
	write_i2c(ram_id);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	db df       	rcall	.-74     	; 0xe8 <write_i2c>
	
	
	write_i2c(ss);
 132:	81 2f       	mov	r24, r17
 134:	d9 df       	rcall	.-78     	; 0xe8 <write_i2c>
	write_i2c(mm);
 136:	8d 2f       	mov	r24, r29
 138:	d7 df       	rcall	.-82     	; 0xe8 <write_i2c>
	write_i2c(hh);
 13a:	8c 2f       	mov	r24, r28
 13c:	d5 df       	rcall	.-86     	; 0xe8 <write_i2c>
 13e:	ea df       	rcall	.-44     	; 0x114 <stop_i2c>
	stop_i2c();
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
}
 144:	1f 91       	pop	r17
 146:	08 95       	ret

00000148 <rtc_get_time>:
 148:	80 ed       	ldi	r24, 0xD0	; 208
 14a:	b5 df       	rcall	.-150    	; 0xb6 <start_i2c>

void rtc_get_time()
{
	
	start_i2c(rtc_writemode);
	write_i2c(ram_id);
 14c:	80 e0       	ldi	r24, 0x00	; 0
	stop_i2c();
 14e:	cc df       	rcall	.-104    	; 0xe8 <write_i2c>
	
	start_i2c(rtc_readmode);
 150:	e1 df       	rcall	.-62     	; 0x114 <stop_i2c>
 152:	81 ed       	ldi	r24, 0xD1	; 209
	ss=read_ack();
 154:	b0 df       	rcall	.-160    	; 0xb6 <start_i2c>
 156:	d3 df       	rcall	.-90     	; 0xfe <read_ack>
 158:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ss>
	mm=read_ack();
 15c:	d0 df       	rcall	.-96     	; 0xfe <read_ack>
 15e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	hh=read_ack();
 162:	cd df       	rcall	.-102    	; 0xfe <read_ack>
 164:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hh>
	stop_i2c();
 168:	d5 cf       	rjmp	.-86     	; 0x114 <stop_i2c>
 16a:	08 95       	ret

0000016c <main>:
 16c:	0f d0       	rcall	.+30     	; 0x18c <u_initiate>

int main()
{
	u_initiate();
	
	rtc_set_time(0x01,0x59,0x00);//24 hr format
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	69 e5       	ldi	r22, 0x59	; 89
 172:	81 e0       	ldi	r24, 0x01	; 1
		//DDRA=0xFF;
	    //PORTA=0xFF;
		while(1)
		{
			rtc_get_time();
 174:	d3 df       	rcall	.-90     	; 0x11c <rtc_set_time>
			
			u_transmit((unsigned char)ss);
 176:	e8 df       	rcall	.-48     	; 0x148 <rtc_get_time>
 178:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ss>
			u_transmit((unsigned char)mm);
 17c:	11 d0       	rcall	.+34     	; 0x1a0 <u_transmit>
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
			u_transmit((unsigned char)hh);
 182:	0e d0       	rcall	.+28     	; 0x1a0 <u_transmit>
 184:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hh>
 188:	0b d0       	rcall	.+22     	; 0x1a0 <u_transmit>
 18a:	f5 cf       	rjmp	.-22     	; 0x176 <main+0xa>

0000018c <u_initiate>:
#include "usart.h"


void u_initiate()
{
	UBRR0H=(unsigned char)(baudrate>>8);
 18c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L=(unsigned char)baudrate;
 190:	83 e3       	ldi	r24, 0x33	; 51
 192:	89 b9       	out	0x09, r24	; 9
	UCSR0B=(1<<RXEN | 1<<TXEN); //enable tx and rx
 194:	88 e1       	ldi	r24, 0x18	; 24
 196:	8a b9       	out	0x0a, r24	; 10
	UCSR0C=(1<<UCSZ1 | 1<<UCSZ0); //8bit
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 19e:	08 95       	ret

000001a0 <u_transmit>:
}
void u_transmit(unsigned char data)
{
	while(!(UCSR0A & 1<<UDRE));
 1a0:	5d 9b       	sbis	0x0b, 5	; 11
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <u_transmit>
	
	UDR0=data;
 1a4:	8c b9       	out	0x0c, r24	; 12
 1a6:	08 95       	ret

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
